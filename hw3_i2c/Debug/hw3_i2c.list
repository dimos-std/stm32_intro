
hw3_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a98  08003a98  00004a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa8  08003aa8  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003aa8  08003aa8  00004aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab0  08003ab0  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab0  08003ab0  00004ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ab4  08003ab4  00004ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003ab8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000001c  08003ad4  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003ad4  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0d3  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdc  00000000  00000000  0000f11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00010d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a8  00000000  00000000  00011710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c803  00000000  00000000  00011eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7e9  00000000  00000000  0002e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2d70  00000000  00000000  00039ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecc14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  000ecc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ef468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003a80 	.word	0x08003a80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08003a80 	.word	0x08003a80

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 faf5 	bl	800081a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f824 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f8e2 	bl	80003fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000238:	f000 f860 	bl	80002fc <MX_I2C1_Init>
  MX_I2C2_Init();
 800023c:	f000 f89e 	bl	800037c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Slave_Receive_IT(&hi2c2, i2c2_rx_buf, strlen((char*)i2c1_tx_buf));
 8000240:	480a      	ldr	r0, [pc, #40]	@ (800026c <main+0x44>)
 8000242:	f7ff ffe9 	bl	8000218 <strlen>
 8000246:	4603      	mov	r3, r0
 8000248:	b29b      	uxth	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	4908      	ldr	r1, [pc, #32]	@ (8000270 <main+0x48>)
 800024e:	4809      	ldr	r0, [pc, #36]	@ (8000274 <main+0x4c>)
 8000250:	f000 ffa6 	bl	80011a0 <HAL_I2C_Slave_Receive_IT>
  HAL_I2C_Master_Transmit_IT(&hi2c1, 20, i2c1_tx_buf, strlen((char*)i2c1_tx_buf));
 8000254:	4805      	ldr	r0, [pc, #20]	@ (800026c <main+0x44>)
 8000256:	f7ff ffdf 	bl	8000218 <strlen>
 800025a:	4603      	mov	r3, r0
 800025c:	b29b      	uxth	r3, r3
 800025e:	4a03      	ldr	r2, [pc, #12]	@ (800026c <main+0x44>)
 8000260:	2114      	movs	r1, #20
 8000262:	4805      	ldr	r0, [pc, #20]	@ (8000278 <main+0x50>)
 8000264:	f000 ff04 	bl	8001070 <HAL_I2C_Master_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000268:	bf00      	nop
 800026a:	e7fd      	b.n	8000268 <main+0x40>
 800026c:	20000000 	.word	0x20000000
 8000270:	200000e0 	.word	0x200000e0
 8000274:	2000008c 	.word	0x2000008c
 8000278:	20000038 	.word	0x20000038

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b094      	sub	sp, #80	@ 0x50
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2238      	movs	r2, #56	@ 0x38
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fbcc 	bl	8003a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002a2:	f002 fc27 	bl	8002af4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	2340      	movs	r3, #64	@ 0x40
 80002b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b4:	2300      	movs	r3, #0
 80002b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0318 	add.w	r3, r7, #24
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 fccd 	bl	8002c5c <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c8:	f000 f91a 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d0:	2301      	movs	r3, #1
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 ffcb 	bl	8003280 <HAL_RCC_ClockConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f0:	f000 f906 	bl	8000500 <Error_Handler>
  }
}
 80002f4:	bf00      	nop
 80002f6:	3750      	adds	r7, #80	@ 0x50
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000300:	4b1b      	ldr	r3, [pc, #108]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000302:	4a1c      	ldr	r2, [pc, #112]	@ (8000374 <MX_I2C1_Init+0x78>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000308:	4a1b      	ldr	r2, [pc, #108]	@ (8000378 <MX_I2C1_Init+0x7c>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800030c:	4b18      	ldr	r3, [pc, #96]	@ (8000370 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000312:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000314:	2201      	movs	r2, #1
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000318:	4b15      	ldr	r3, [pc, #84]	@ (8000370 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800031e:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000324:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032a:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <MX_I2C1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000330:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000336:	480e      	ldr	r0, [pc, #56]	@ (8000370 <MX_I2C1_Init+0x74>)
 8000338:	f000 fdfe 	bl	8000f38 <HAL_I2C_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000342:	f000 f8dd 	bl	8000500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000346:	2100      	movs	r1, #0
 8000348:	4809      	ldr	r0, [pc, #36]	@ (8000370 <MX_I2C1_Init+0x74>)
 800034a:	f002 fb3b 	bl	80029c4 <HAL_I2CEx_ConfigAnalogFilter>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000354:	f000 f8d4 	bl	8000500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000358:	2100      	movs	r1, #0
 800035a:	4805      	ldr	r0, [pc, #20]	@ (8000370 <MX_I2C1_Init+0x74>)
 800035c:	f002 fb7d 	bl	8002a5a <HAL_I2CEx_ConfigDigitalFilter>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000366:	f000 f8cb 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000038 	.word	0x20000038
 8000374:	40005400 	.word	0x40005400
 8000378:	00503d58 	.word	0x00503d58

0800037c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <MX_I2C2_Init+0x74>)
 8000382:	4a1c      	ldr	r2, [pc, #112]	@ (80003f4 <MX_I2C2_Init+0x78>)
 8000384:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000386:	4b1a      	ldr	r3, [pc, #104]	@ (80003f0 <MX_I2C2_Init+0x74>)
 8000388:	4a1b      	ldr	r2, [pc, #108]	@ (80003f8 <MX_I2C2_Init+0x7c>)
 800038a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <MX_I2C2_Init+0x74>)
 800038e:	2214      	movs	r2, #20
 8000390:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000392:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <MX_I2C2_Init+0x74>)
 8000394:	2201      	movs	r2, #1
 8000396:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <MX_I2C2_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800039e:	4b14      	ldr	r3, [pc, #80]	@ (80003f0 <MX_I2C2_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <MX_I2C2_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003aa:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <MX_I2C2_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <MX_I2C2_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003b6:	480e      	ldr	r0, [pc, #56]	@ (80003f0 <MX_I2C2_Init+0x74>)
 80003b8:	f000 fdbe 	bl	8000f38 <HAL_I2C_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80003c2:	f000 f89d 	bl	8000500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c6:	2100      	movs	r1, #0
 80003c8:	4809      	ldr	r0, [pc, #36]	@ (80003f0 <MX_I2C2_Init+0x74>)
 80003ca:	f002 fafb 	bl	80029c4 <HAL_I2CEx_ConfigAnalogFilter>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80003d4:	f000 f894 	bl	8000500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80003d8:	2100      	movs	r1, #0
 80003da:	4805      	ldr	r0, [pc, #20]	@ (80003f0 <MX_I2C2_Init+0x74>)
 80003dc:	f002 fb3d 	bl	8002a5a <HAL_I2CEx_ConfigDigitalFilter>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80003e6:	f000 f88b 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	40005800 	.word	0x40005800
 80003f8:	00503d58 	.word	0x00503d58

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	@ 0x28
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	4b23      	ldr	r3, [pc, #140]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000416:	4a22      	ldr	r2, [pc, #136]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041e:	4b20      	ldr	r3, [pc, #128]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	f003 0304 	and.w	r3, r3, #4
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042a:	4b1d      	ldr	r3, [pc, #116]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000430:	f043 0320 	orr.w	r3, r3, #32
 8000434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000436:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	f003 0320 	and.w	r3, r3, #32
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	4a16      	ldr	r2, [pc, #88]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800044e:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000460:	f043 0302 	orr.w	r3, r3, #2
 8000464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <MX_GPIO_Init+0xa4>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	f003 0302 	and.w	r3, r3, #2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ON_BOARD_GPIO_Port, LED_ON_BOARD_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2140      	movs	r1, #64	@ 0x40
 8000476:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000478:	f000 fd46 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ON_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_ON_BOARD_Pin;
 800047c:	2340      	movs	r3, #64	@ 0x40
 800047e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	2301      	movs	r3, #1
 8000482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	2300      	movs	r3, #0
 800048a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ON_BOARD_GPIO_Port, &GPIO_InitStruct);
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	4619      	mov	r1, r3
 8000492:	4804      	ldr	r0, [pc, #16]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000494:	f000 fbb6 	bl	8000c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000498:	bf00      	nop
 800049a:	3728      	adds	r7, #40	@ 0x28
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000800 	.word	0x48000800

080004a8 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
//
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a06      	ldr	r2, [pc, #24]	@ (80004cc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d102      	bne.n	80004be <HAL_I2C_MasterTxCpltCallback+0x16>
		tx_flag = 1;
 80004b8:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000038 	.word	0x20000038
 80004d0:	200000ef 	.word	0x200000ef

080004d4 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a06      	ldr	r2, [pc, #24]	@ (80004f8 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d102      	bne.n	80004ea <HAL_I2C_SlaveRxCpltCallback+0x16>
		rx_flag = 1;
 80004e4:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000008c 	.word	0x2000008c
 80004fc:	200000f0 	.word	0x200000f0

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <Error_Handler+0x8>

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <HAL_MspInit+0x44>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000516:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <HAL_MspInit+0x44>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6613      	str	r3, [r2, #96]	@ 0x60
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_MspInit+0x44>)
 8000520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <HAL_MspInit+0x44>)
 800052c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052e:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <HAL_MspInit+0x44>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000534:	6593      	str	r3, [r2, #88]	@ 0x58
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <HAL_MspInit+0x44>)
 8000538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800053a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000542:	f002 fb7b 	bl	8002c3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b09e      	sub	sp, #120	@ 0x78
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	2244      	movs	r2, #68	@ 0x44
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f003 fa57 	bl	8003a28 <memset>
  if(hi2c->Instance==I2C1)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a62      	ldr	r2, [pc, #392]	@ (8000708 <HAL_I2C_MspInit+0x1b4>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d15c      	bne.n	800063e <HAL_I2C_MspInit+0xea>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000584:	2340      	movs	r3, #64	@ 0x40
 8000586:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f003 f859 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800059c:	f7ff ffb0 	bl	8000500 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b5a      	ldr	r3, [pc, #360]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80005a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a4:	4a59      	ldr	r2, [pc, #356]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ac:	4b57      	ldr	r3, [pc, #348]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80005ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
 80005b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b54      	ldr	r3, [pc, #336]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80005ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005bc:	4a53      	ldr	r2, [pc, #332]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c4:	4b51      	ldr	r3, [pc, #324]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80005c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c8:	f003 0302 	and.w	r3, r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005d6:	2312      	movs	r3, #18
 80005d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005da:	2301      	movs	r3, #1
 80005dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005e2:	2304      	movs	r3, #4
 80005e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f0:	f000 fb08 	bl	8000c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f8:	2312      	movs	r3, #18
 80005fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000604:	2304      	movs	r3, #4
 8000606:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800060c:	4619      	mov	r1, r3
 800060e:	4840      	ldr	r0, [pc, #256]	@ (8000710 <HAL_I2C_MspInit+0x1bc>)
 8000610:	f000 faf8 	bl	8000c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000614:	4b3d      	ldr	r3, [pc, #244]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 8000616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000618:	4a3c      	ldr	r2, [pc, #240]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 800061a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800061e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000620:	4b3a      	ldr	r3, [pc, #232]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 8000622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2106      	movs	r1, #6
 8000630:	201f      	movs	r0, #31
 8000632:	f000 fa3e 	bl	8000ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000636:	201f      	movs	r0, #31
 8000638:	f000 fa55 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800063c:	e060      	b.n	8000700 <HAL_I2C_MspInit+0x1ac>
  else if(hi2c->Instance==I2C2)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <HAL_I2C_MspInit+0x1c0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d15b      	bne.n	8000700 <HAL_I2C_MspInit+0x1ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fff7 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <HAL_I2C_MspInit+0x110>
      Error_Handler();
 8000660:	f7ff ff4e 	bl	8000500 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	4b29      	ldr	r3, [pc, #164]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000668:	4a28      	ldr	r2, [pc, #160]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 800068a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000694:	2310      	movs	r3, #16
 8000696:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000698:	2312      	movs	r3, #18
 800069a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006a4:	2304      	movs	r3, #4
 80006a6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006ac:	4619      	mov	r1, r3
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <HAL_I2C_MspInit+0x1c4>)
 80006b0:	f000 faa8 	bl	8000c04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ba:	2312      	movs	r3, #18
 80006bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006c6:	2304      	movs	r3, #4
 80006c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f000 fa96 	bl	8000c04 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80006da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006dc:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80006de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <HAL_I2C_MspInit+0x1b8>)
 80006e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2105      	movs	r1, #5
 80006f4:	2021      	movs	r0, #33	@ 0x21
 80006f6:	f000 f9dc 	bl	8000ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80006fa:	2021      	movs	r0, #33	@ 0x21
 80006fc:	f000 f9f3 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
}
 8000700:	bf00      	nop
 8000702:	3778      	adds	r7, #120	@ 0x78
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40005400 	.word	0x40005400
 800070c:	40021000 	.word	0x40021000
 8000710:	48000400 	.word	0x48000400
 8000714:	40005800 	.word	0x40005800
 8000718:	48000800 	.word	0x48000800

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f8a5 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000780:	4802      	ldr	r0, [pc, #8]	@ (800078c <I2C1_EV_IRQHandler+0x10>)
 8000782:	f000 fd5d 	bl	8001240 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000038 	.word	0x20000038

08000790 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000794:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <I2C2_EV_IRQHandler+0x10>)
 8000796:	f000 fd53 	bl	8001240 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000008c 	.word	0x2000008c

080007a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <SystemInit+0x20>)
 80007aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <SystemInit+0x20>)
 80007b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c8:	480d      	ldr	r0, [pc, #52]	@ (8000800 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff ffea 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	@ (8000808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <LoopForever+0xe>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000814 <LoopForever+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80007f6:	f003 f91f 	bl	8003a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fa:	f7ff fd15 	bl	8000228 <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   r0, =_estack
 8000800:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800080c:	08003ab8 	.word	0x08003ab8
  ldr r2, =_sbss
 8000810:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000814:	200000f8 	.word	0x200000f8

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>

0800081a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000820:	2300      	movs	r3, #0
 8000822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f939 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082a:	200f      	movs	r0, #15
 800082c:	f000 f80e 	bl	800084c <HAL_InitTick>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	e001      	b.n	8000840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800083c:	f7ff fe66 	bl	800050c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000840:	79fb      	ldrb	r3, [r7, #7]

}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <HAL_InitTick+0x68>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d022      	beq.n	80008a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <HAL_InitTick+0x6c>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <HAL_InitTick+0x68>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800086c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000870:	fbb2 f3f3 	udiv	r3, r2, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f944 	bl	8000b02 <HAL_SYSTICK_Config>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10f      	bne.n	80008a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b0f      	cmp	r3, #15
 8000884:	d809      	bhi.n	800089a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000886:	2200      	movs	r2, #0
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800088e:	f000 f910 	bl	8000ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <HAL_InitTick+0x70>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	e007      	b.n	80008aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e004      	b.n	80008aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e001      	b.n	80008aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000018 	.word	0x20000018
 80008b8:	20000010 	.word	0x20000010
 80008bc:	20000014 	.word	0x20000014

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_IncTick+0x1c>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_IncTick+0x20>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <HAL_IncTick+0x1c>)
 80008d0:	6013      	str	r3, [r2, #0]
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	200000f4 	.word	0x200000f4
 80008e0:	20000018 	.word	0x20000018

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200000f4 	.word	0x200000f4

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	@ (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db0b      	blt.n	800098a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f003 021f 	and.w	r2, r3, #31
 8000978:	4907      	ldr	r1, [pc, #28]	@ (8000998 <__NVIC_EnableIRQ+0x38>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	2001      	movs	r0, #1
 8000982:	fa00 f202 	lsl.w	r2, r0, r2
 8000986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	@ (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	@ (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	@ 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	@ 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a68:	d301      	bcc.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00f      	b.n	8000a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <SysTick_Config+0x40>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	210f      	movs	r1, #15
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a7c:	f7ff ff8e 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <SysTick_Config+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <SysTick_Config+0x40>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff29 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac0:	f7ff ff40 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000ac4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	6978      	ldr	r0, [r7, #20]
 8000acc:	f7ff ff90 	bl	80009f0 <NVIC_EncodePriority>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff5f 	bl	800099c <__NVIC_SetPriority>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff33 	bl	8000960 <__NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ffa4 	bl	8000a58 <SysTick_Config>
 8000b10:	4603      	mov	r3, r0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d00d      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2204      	movs	r2, #4
 8000b36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e047      	b.n	8000bde <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 020e 	bic.w	r2, r2, #14
 8000b5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0201 	bic.w	r2, r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f003 021f 	and.w	r2, r3, #31
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000b9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d00c      	beq.n	8000bbe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000bb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000bbc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	4798      	blx	r3
    }
  }
  return status;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000bf6:	b2db      	uxtb	r3, r3
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c12:	e15a      	b.n	8000eca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 814c 	beq.w	8000ec4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d017      	beq.n	8000ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d123      	bne.n	8000d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	6939      	ldr	r1, [r7, #16]
 8000d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0203 	and.w	r2, r3, #3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 80a6 	beq.w	8000ec4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	4b5b      	ldr	r3, [pc, #364]	@ (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d84:	4b58      	ldr	r3, [pc, #352]	@ (8000ee8 <HAL_GPIO_Init+0x2e4>)
 8000d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d90:	4a56      	ldr	r2, [pc, #344]	@ (8000eec <HAL_GPIO_Init+0x2e8>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dba:	d01f      	beq.n	8000dfc <HAL_GPIO_Init+0x1f8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef0 <HAL_GPIO_Init+0x2ec>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d019      	beq.n	8000df8 <HAL_GPIO_Init+0x1f4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef4 <HAL_GPIO_Init+0x2f0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d013      	beq.n	8000df4 <HAL_GPIO_Init+0x1f0>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a4a      	ldr	r2, [pc, #296]	@ (8000ef8 <HAL_GPIO_Init+0x2f4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d00d      	beq.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a49      	ldr	r2, [pc, #292]	@ (8000efc <HAL_GPIO_Init+0x2f8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d007      	beq.n	8000dec <HAL_GPIO_Init+0x1e8>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <HAL_GPIO_Init+0x2fc>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d101      	bne.n	8000de8 <HAL_GPIO_Init+0x1e4>
 8000de4:	2305      	movs	r3, #5
 8000de6:	e00a      	b.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000de8:	2306      	movs	r3, #6
 8000dea:	e008      	b.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000dec:	2304      	movs	r3, #4
 8000dee:	e006      	b.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000df0:	2303      	movs	r3, #3
 8000df2:	e004      	b.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e002      	b.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_GPIO_Init+0x1fa>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	f002 0203 	and.w	r2, r2, #3
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	4093      	lsls	r3, r2
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0e:	4937      	ldr	r1, [pc, #220]	@ (8000eec <HAL_GPIO_Init+0x2e8>)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3302      	adds	r3, #2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e1c:	4b39      	ldr	r3, [pc, #228]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e40:	4a30      	ldr	r2, [pc, #192]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e46:	4b2f      	ldr	r3, [pc, #188]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e6a:	4a26      	ldr	r2, [pc, #152]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000e70:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e94:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ebe:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <HAL_GPIO_Init+0x300>)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f47f ae9d 	bne.w	8000c14 <HAL_GPIO_Init+0x10>
  }
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	48000400 	.word	0x48000400
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000c00 	.word	0x48000c00
 8000efc:	48001000 	.word	0x48001000
 8000f00:	48001400 	.word	0x48001400
 8000f04:	40010400 	.word	0x40010400

08000f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f18:	787b      	ldrb	r3, [r7, #1]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e08d      	b.n	8001066 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d106      	bne.n	8000f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff faf8 	bl	8000554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2224      	movs	r2, #36	@ 0x24
 8000f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d107      	bne.n	8000fb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	e006      	b.n	8000fc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000fbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d108      	bne.n	8000fda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	e007      	b.n	8000fea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fe8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ffc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800100c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69d9      	ldr	r1, [r3, #28]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1a      	ldr	r2, [r3, #32]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af02      	add	r7, sp, #8
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	461a      	mov	r2, r3
 800107c:	460b      	mov	r3, r1
 800107e:	817b      	strh	r3, [r7, #10]
 8001080:	4613      	mov	r3, r2
 8001082:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b20      	cmp	r3, #32
 800108e:	d17c      	bne.n	800118a <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800109e:	d101      	bne.n	80010a4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80010a0:	2302      	movs	r3, #2
 80010a2:	e073      	b.n	800118c <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_I2C_Master_Transmit_IT+0x42>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e06c      	b.n	800118c <HAL_I2C_Master_Transmit_IT+0x11c>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2221      	movs	r2, #33	@ 0x21
 80010be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2210      	movs	r2, #16
 80010c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	893a      	ldrh	r2, [r7, #8]
 80010da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4a2d      	ldr	r2, [pc, #180]	@ (8001194 <HAL_I2C_Master_Transmit_IT+0x124>)
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001198 <HAL_I2C_Master_Transmit_IT+0x128>)
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	2bff      	cmp	r3, #255	@ 0xff
 80010f0:	d906      	bls.n	8001100 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	22ff      	movs	r2, #255	@ 0xff
 80010f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80010f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	e007      	b.n	8001110 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001104:	b29a      	uxth	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800110a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800110e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001114:	2b00      	cmp	r3, #0
 8001116:	d024      	beq.n	8001162 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	3b01      	subs	r3, #1
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	8979      	ldrh	r1, [r7, #10]
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_I2C_Master_Transmit_IT+0x12c>)
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f001 fb1e 	bl	800279c <I2C_TransferConfig>
 8001160:	e009      	b.n	8001176 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001166:	b2da      	uxtb	r2, r3
 8001168:	8979      	ldrh	r1, [r7, #10]
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <HAL_I2C_Master_Transmit_IT+0x12c>)
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f001 fb13 	bl	800279c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800117e:	2101      	movs	r1, #1
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f001 fb3d 	bl	8002800 <I2C_Enable_IRQ>

    return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800118a:	2302      	movs	r3, #2
  }
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	ffff0000 	.word	0xffff0000
 8001198:	0800131d 	.word	0x0800131d
 800119c:	80002000 	.word	0x80002000

080011a0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	4613      	mov	r3, r2
 80011ac:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	d139      	bne.n	800122e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_I2C_Slave_Receive_IT+0x28>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e033      	b.n	8001230 <HAL_I2C_Slave_Receive_IT+0x90>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2222      	movs	r2, #34	@ 0x22
 80011d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011f4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	88fa      	ldrh	r2, [r7, #6]
 8001200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001206:	b29a      	uxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_I2C_Slave_Receive_IT+0x98>)
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4a09      	ldr	r2, [pc, #36]	@ (800123c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001216:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001220:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f001 faeb 	bl	8002800 <I2C_Enable_IRQ>

    return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800122e:	2302      	movs	r3, #2
  }
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	ffff0000 	.word	0xffff0000
 800123c:	08001585 	.word	0x08001585

08001240 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	4798      	blx	r3
  }
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
 80012a8:	4613      	mov	r3, r2
 80012aa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <I2C_Master_ISR_IT+0x1e>
 8001336:	2302      	movs	r3, #2
 8001338:	e120      	b.n	800157c <I2C_Master_ISR_IT+0x260>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d013      	beq.n	8001376 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00d      	beq.n	8001376 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2210      	movs	r2, #16
 8001360:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f043 0204 	orr.w	r2, r3, #4
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f001 f9d1 	bl	8002716 <I2C_Flush_TXDR>
 8001374:	e0ed      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d023      	beq.n	80013ca <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01d      	beq.n	80013ca <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80013c8:	e0c3      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d12a      	bne.n	800142c <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d024      	beq.n	800142c <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01e      	beq.n	800142c <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80ac 	beq.w	8001552 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001420:	b29b      	uxth	r3, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	b29a      	uxth	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800142a:	e092      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	09db      	lsrs	r3, r3, #7
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d05d      	beq.n	80014f4 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	099b      	lsrs	r3, r3, #6
 800143c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001440:	2b00      	cmp	r3, #0
 8001442:	d057      	beq.n	80014f4 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d040      	beq.n	80014d0 <I2C_Master_ISR_IT+0x1b4>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001452:	2b00      	cmp	r3, #0
 8001454:	d13c      	bne.n	80014d0 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	b29b      	uxth	r3, r3
 800145e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001462:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	2bff      	cmp	r3, #255	@ 0xff
 800146c:	d90e      	bls.n	800148c <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	22ff      	movs	r2, #255	@ 0xff
 8001472:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001478:	b2da      	uxtb	r2, r3
 800147a:	8a79      	ldrh	r1, [r7, #18]
 800147c:	2300      	movs	r3, #0
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f001 f989 	bl	800279c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148a:	e032      	b.n	80014f2 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800149e:	d00b      	beq.n	80014b8 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80014aa:	8a79      	ldrh	r1, [r7, #18]
 80014ac:	2000      	movs	r0, #0
 80014ae:	9000      	str	r0, [sp, #0]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f001 f973 	bl	800279c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b6:	e01c      	b.n	80014f2 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	8a79      	ldrh	r1, [r7, #18]
 80014c0:	2300      	movs	r3, #0
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f001 f967 	bl	800279c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ce:	e010      	b.n	80014f2 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80014de:	d003      	beq.n	80014e8 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fcdc 	bl	8001e9e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014e6:	e034      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80014e8:	2140      	movs	r1, #64	@ 0x40
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 fffc 	bl	80024e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014f0:	e02f      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
 80014f2:	e02e      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	099b      	lsrs	r3, r3, #6
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d028      	beq.n	8001552 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	099b      	lsrs	r3, r3, #6
 8001504:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001508:	2b00      	cmp	r3, #0
 800150a:	d022      	beq.n	8001552 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d119      	bne.n	800154a <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001524:	d015      	beq.n	8001552 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800152e:	d108      	bne.n	8001542 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	e007      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 fcab 	bl	8001e9e <I2C_ITMasterSeqCplt>
 8001548:	e003      	b.n	8001552 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800154a:	2140      	movs	r1, #64	@ 0x40
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 ffcb 	bl	80024e8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	095b      	lsrs	r3, r3, #5
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d009      	beq.n	8001572 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	095b      	lsrs	r3, r3, #5
 8001562:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800156a:	6979      	ldr	r1, [r7, #20]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fd31 	bl	8001fd4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <I2C_Slave_ISR_IT+0x24>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e0ed      	b.n	8001784 <I2C_Slave_ISR_IT+0x200>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00a      	beq.n	80015d2 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80015c8:	6939      	ldr	r1, [r7, #16]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 fdcc 	bl	8002168 <I2C_ITSlaveCplt>
 80015d0:	e0d3      	b.n	800177a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d04d      	beq.n	800167a <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d047      	beq.n	800167a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d128      	bne.n	8001646 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b28      	cmp	r3, #40	@ 0x28
 80015fe:	d108      	bne.n	8001612 <I2C_Slave_ISR_IT+0x8e>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001606:	d104      	bne.n	8001612 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 ff16 	bl	800243c <I2C_ITListenCplt>
 8001610:	e032      	b.n	8001678 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b29      	cmp	r3, #41	@ 0x29
 800161c:	d10e      	bne.n	800163c <I2C_Slave_ISR_IT+0xb8>
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001624:	d00a      	beq.n	800163c <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2210      	movs	r2, #16
 800162c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f001 f871 	bl	8002716 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fc6f 	bl	8001f18 <I2C_ITSlaveSeqCplt>
 800163a:	e01d      	b.n	8001678 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2210      	movs	r2, #16
 8001642:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001644:	e096      	b.n	8001774 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2210      	movs	r2, #16
 800164c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f043 0204 	orr.w	r2, r3, #4
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <I2C_Slave_ISR_IT+0xe6>
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001666:	f040 8085 	bne.w	8001774 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 ff39 	bl	80024e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001676:	e07d      	b.n	8001774 <I2C_Slave_ISR_IT+0x1f0>
 8001678:	e07c      	b.n	8001774 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d030      	beq.n	80016e8 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800168e:	2b00      	cmp	r3, #0
 8001690:	d02a      	beq.n	80016e8 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d018      	beq.n	80016ce <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d14f      	bne.n	8001778 <I2C_Slave_ISR_IT+0x1f4>
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016de:	d04b      	beq.n	8001778 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 fc19 	bl	8001f18 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80016e6:	e047      	b.n	8001778 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001700:	6939      	ldr	r1, [r7, #16]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fb47 	bl	8001d96 <I2C_ITAddrCplt>
 8001708:	e037      	b.n	800177a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d031      	beq.n	800177a <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800171e:	2b00      	cmp	r3, #0
 8001720:	d02b      	beq.n	800177a <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001726:	b29b      	uxth	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d018      	beq.n	800175e <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800175c:	e00d      	b.n	800177a <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001764:	d002      	beq.n	800176c <I2C_Slave_ISR_IT+0x1e8>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d106      	bne.n	800177a <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 fbd3 	bl	8001f18 <I2C_ITSlaveSeqCplt>
 8001772:	e002      	b.n	800177a <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8001778:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <I2C_Master_ISR_DMA+0x1a>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e0e1      	b.n	800196a <I2C_Master_ISR_DMA+0x1de>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d017      	beq.n	80017ea <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d011      	beq.n	80017ea <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2210      	movs	r2, #16
 80017cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f043 0204 	orr.w	r2, r3, #4
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80017da:	2120      	movs	r1, #32
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f001 f80f 	bl	8002800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 ff97 	bl	8002716 <I2C_Flush_TXDR>
 80017e8:	e0ba      	b.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	09db      	lsrs	r3, r3, #7
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d072      	beq.n	80018dc <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d06c      	beq.n	80018dc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001810:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d04e      	beq.n	80018ba <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	b29b      	uxth	r3, r3
 8001824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001828:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	2bff      	cmp	r3, #255	@ 0xff
 8001832:	d906      	bls.n	8001842 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	22ff      	movs	r2, #255	@ 0xff
 8001838:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800183a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e010      	b.n	8001864 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001850:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001854:	d003      	beq.n	800185e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e002      	b.n	8001864 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800185e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001862:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001868:	b2da      	uxtb	r2, r3
 800186a:	8a79      	ldrh	r1, [r7, #18]
 800186c:	2300      	movs	r3, #0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 ff92 	bl	800279c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b22      	cmp	r3, #34	@ 0x22
 8001894:	d108      	bne.n	80018a8 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018a6:	e05b      	b.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018b8:	e052      	b.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80018c8:	d003      	beq.n	80018d2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fae7 	bl	8001e9e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80018d0:	e046      	b.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018d2:	2140      	movs	r1, #64	@ 0x40
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fe07 	bl	80024e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80018da:	e041      	b.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d029      	beq.n	800193c <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d023      	beq.n	800193c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d119      	bne.n	8001932 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800190c:	d027      	beq.n	800195e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001916:	d108      	bne.n	800192a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001926:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001928:	e019      	b.n	800195e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 fab7 	bl	8001e9e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001930:	e015      	b.n	800195e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001932:	2140      	movs	r1, #64	@ 0x40
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fdd7 	bl	80024e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800193a:	e010      	b.n	800195e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00b      	beq.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fb3c 	bl	8001fd4 <I2C_ITMasterCplt>
 800195c:	e000      	b.n	8001960 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800195e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001980:	4b92      	ldr	r3, [pc, #584]	@ (8001bcc <I2C_Mem_ISR_DMA+0x258>)
 8001982:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <I2C_Mem_ISR_DMA+0x1e>
 800198e:	2302      	movs	r3, #2
 8001990:	e118      	b.n	8001bc4 <I2C_Mem_ISR_DMA+0x250>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d017      	beq.n	80019d6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d011      	beq.n	80019d6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2210      	movs	r2, #16
 80019b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f043 0204 	orr.w	r2, r3, #4
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80019c6:	2120      	movs	r1, #32
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 ff19 	bl	8002800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fea1 	bl	8002716 <I2C_Flush_TXDR>
 80019d4:	e0f1      	b.n	8001bba <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00f      	beq.n	8001a02 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a00:	e0db      	b.n	8001bba <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	09db      	lsrs	r3, r3, #7
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d060      	beq.n	8001ad0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d05a      	beq.n	8001ad0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 ff73 	bl	8002908 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a22:	2110      	movs	r1, #16
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 feeb 	bl	8002800 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d048      	beq.n	8001ac6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2bff      	cmp	r3, #255	@ 0xff
 8001a3c:	d910      	bls.n	8001a60 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	22ff      	movs	r2, #255	@ 0xff
 8001a42:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fe9f 	bl	800279c <I2C_TransferConfig>
 8001a5e:	e011      	b.n	8001a84 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	2300      	movs	r3, #0
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 fe8c 	bl	800279c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b22      	cmp	r3, #34	@ 0x22
 8001aa0:	d108      	bne.n	8001ab4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ab0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ab2:	e082      	b.n	8001bba <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ac2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ac4:	e079      	b.n	8001bba <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ac6:	2140      	movs	r1, #64	@ 0x40
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 fd0d 	bl	80024e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001ace:	e074      	b.n	8001bba <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d05e      	beq.n	8001b9a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d058      	beq.n	8001b9a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 ff0c 	bl	8002908 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001af0:	2110      	movs	r1, #16
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 fe84 	bl	8002800 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b22      	cmp	r3, #34	@ 0x22
 8001b02:	d101      	bne.n	8001b08 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8001b04:	4b32      	ldr	r3, [pc, #200]	@ (8001bd0 <I2C_Mem_ISR_DMA+0x25c>)
 8001b06:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2bff      	cmp	r3, #255	@ 0xff
 8001b10:	d910      	bls.n	8001b34 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	22ff      	movs	r2, #255	@ 0xff
 8001b16:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1c:	b299      	uxth	r1, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fe35 	bl	800279c <I2C_TransferConfig>
 8001b32:	e011      	b.n	8001b58 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	b299      	uxth	r1, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fe22 	bl	800279c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b22      	cmp	r3, #34	@ 0x22
 8001b74:	d108      	bne.n	8001b88 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b84:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b86:	e018      	b.n	8001bba <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b96:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b98:	e00f      	b.n	8001bba <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fa0d 	bl	8001fd4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	80002000 	.word	0x80002000
 8001bd0:	80002400 	.word	0x80002400

08001bd4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <I2C_Slave_ISR_DMA+0x24>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e0ca      	b.n	8001d8e <I2C_Slave_ISR_DMA+0x1ba>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 faa4 	bl	8002168 <I2C_ITSlaveCplt>
 8001c20:	e0b0      	b.n	8001d84 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 809a 	beq.w	8001d64 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8093 	beq.w	8001d64 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0b9b      	lsrs	r3, r3, #14
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0bdb      	lsrs	r3, r3, #15
 8001c4e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d07f      	beq.n	8001d56 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0bdb      	lsrs	r3, r3, #15
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8001c76:	2301      	movs	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00d      	beq.n	8001c9e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0b9b      	lsrs	r3, r3, #14
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d128      	bne.n	8001cf6 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b28      	cmp	r3, #40	@ 0x28
 8001cae:	d108      	bne.n	8001cc2 <I2C_Slave_ISR_DMA+0xee>
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cb6:	d104      	bne.n	8001cc2 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 fbbe 	bl	800243c <I2C_ITListenCplt>
 8001cc0:	e048      	b.n	8001d54 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b29      	cmp	r3, #41	@ 0x29
 8001ccc:	d10e      	bne.n	8001cec <I2C_Slave_ISR_DMA+0x118>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cd4:	d00a      	beq.n	8001cec <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2210      	movs	r2, #16
 8001cdc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fd19 	bl	8002716 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f000 f917 	bl	8001f18 <I2C_ITSlaveSeqCplt>
 8001cea:	e033      	b.n	8001d54 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001cf4:	e034      	b.n	8001d60 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f043 0204 	orr.w	r2, r3, #4
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d10:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <I2C_Slave_ISR_DMA+0x14c>
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d1e:	d11f      	bne.n	8001d60 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	2b21      	cmp	r3, #33	@ 0x21
 8001d24:	d002      	beq.n	8001d2c <I2C_Slave_ISR_DMA+0x158>
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	2b29      	cmp	r3, #41	@ 0x29
 8001d2a:	d103      	bne.n	8001d34 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2221      	movs	r2, #33	@ 0x21
 8001d30:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d32:	e008      	b.n	8001d46 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d34:	7dfb      	ldrb	r3, [r7, #23]
 8001d36:	2b22      	cmp	r3, #34	@ 0x22
 8001d38:	d002      	beq.n	8001d40 <I2C_Slave_ISR_DMA+0x16c>
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d3e:	d102      	bne.n	8001d46 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2222      	movs	r2, #34	@ 0x22
 8001d44:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fbcb 	bl	80024e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8001d52:	e005      	b.n	8001d60 <I2C_Slave_ISR_DMA+0x18c>
 8001d54:	e004      	b.n	8001d60 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d5e:	e011      	b.n	8001d84 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8001d60:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d62:	e00f      	b.n	8001d84 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	08db      	lsrs	r3, r3, #3
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f809 	bl	8001d96 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001dac:	2b28      	cmp	r3, #40	@ 0x28
 8001dae:	d16a      	bne.n	8001e86 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001dce:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ddc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001dea:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d138      	bne.n	8001e66 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001df4:	897b      	ldrh	r3, [r7, #10]
 8001df6:	09db      	lsrs	r3, r3, #7
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	89bb      	ldrh	r3, [r7, #12]
 8001dfc:	4053      	eors	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	f003 0306 	and.w	r3, r3, #6
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11c      	bne.n	8001e42 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001e08:	897b      	ldrh	r3, [r7, #10]
 8001e0a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d13b      	bne.n	8001e96 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e34:	89ba      	ldrh	r2, [r7, #12]
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fa2e 	bl	800129c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001e40:	e029      	b.n	8001e96 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fd5c 	bl	8002908 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e58:	89ba      	ldrh	r2, [r7, #12]
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fa1c 	bl	800129c <HAL_I2C_AddrCallback>
}
 8001e64:	e017      	b.n	8001e96 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fd4c 	bl	8002908 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e78:	89ba      	ldrh	r2, [r7, #12]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fa0c 	bl	800129c <HAL_I2C_AddrCallback>
}
 8001e84:	e007      	b.n	8001e96 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b21      	cmp	r3, #33	@ 0x21
 8001eb8:	d115      	bne.n	8001ee6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2211      	movs	r2, #17
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fd19 	bl	8002908 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fae2 	bl	80004a8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ee4:	e014      	b.n	8001f10 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2212      	movs	r2, #18
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001efa:	2102      	movs	r1, #2
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fd03 	bl	8002908 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff f9b2 	bl	8001274 <HAL_I2C_MasterRxCpltCallback>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	0b9b      	lsrs	r3, r3, #14
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e00d      	b.n	8001f6a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0bdb      	lsrs	r3, r3, #15
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b29      	cmp	r3, #41	@ 0x29
 8001f74:	d112      	bne.n	8001f9c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2228      	movs	r2, #40	@ 0x28
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2221      	movs	r2, #33	@ 0x21
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f84:	2101      	movs	r1, #1
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fcbe 	bl	8002908 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff f977 	bl	8001288 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f9a:	e017      	b.n	8001fcc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fa6:	d111      	bne.n	8001fcc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2228      	movs	r2, #40	@ 0x28
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2222      	movs	r2, #34	@ 0x22
 8001fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fca5 	bl	8002908 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fa84 	bl	80004d4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b21      	cmp	r3, #33	@ 0x21
 8001ff4:	d107      	bne.n	8002006 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fc85 	bl	8002908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2211      	movs	r2, #17
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
 8002004:	e00c      	b.n	8002020 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b22      	cmp	r3, #34	@ 0x22
 8002010:	d106      	bne.n	8002020 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002012:	2102      	movs	r1, #2
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fc77 	bl	8002908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2212      	movs	r2, #18
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b4d      	ldr	r3, [pc, #308]	@ (8002160 <I2C_ITMasterCplt+0x18c>)
 800202c:	400b      	ands	r3, r1
 800202e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4a      	ldr	r2, [pc, #296]	@ (8002164 <I2C_ITMasterCplt+0x190>)
 800203a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2210      	movs	r2, #16
 800204e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	f043 0204 	orr.w	r2, r3, #4
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b60      	cmp	r3, #96	@ 0x60
 8002066:	d10b      	bne.n	8002080 <I2C_ITMasterCplt+0xac>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	b2db      	uxtb	r3, r3
 800207c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800207e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fb48 	bl	8002716 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b60      	cmp	r3, #96	@ 0x60
 8002096:	d002      	beq.n	800209e <I2C_ITMasterCplt+0xca>
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4619      	mov	r1, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fa1f 	bl	80024e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80020aa:	e054      	b.n	8002156 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b21      	cmp	r3, #33	@ 0x21
 80020b6:	d124      	bne.n	8002102 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b40      	cmp	r3, #64	@ 0x40
 80020d0:	d10b      	bne.n	80020ea <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f8f2 	bl	80012cc <HAL_I2C_MemTxCpltCallback>
}
 80020e8:	e035      	b.n	8002156 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe f9d4 	bl	80004a8 <HAL_I2C_MasterTxCpltCallback>
}
 8002100:	e029      	b.n	8002156 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b22      	cmp	r3, #34	@ 0x22
 800210c:	d123      	bne.n	8002156 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d10b      	bne.n	8002140 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff f8d1 	bl	80012e0 <HAL_I2C_MemRxCpltCallback>
}
 800213e:	e00a      	b.n	8002156 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff f88f 	bl	8001274 <HAL_I2C_MasterRxCpltCallback>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	fe00e800 	.word	0xfe00e800
 8002164:	ffff0000 	.word	0xffff0000

08002168 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800218a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2220      	movs	r2, #32
 8002192:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002194:	7afb      	ldrb	r3, [r7, #11]
 8002196:	2b21      	cmp	r3, #33	@ 0x21
 8002198:	d002      	beq.n	80021a0 <I2C_ITSlaveCplt+0x38>
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	2b29      	cmp	r3, #41	@ 0x29
 800219e:	d108      	bne.n	80021b2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80021a0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fbaf 	bl	8002908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2221      	movs	r2, #33	@ 0x21
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b0:	e019      	b.n	80021e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	2b22      	cmp	r3, #34	@ 0x22
 80021b6:	d002      	beq.n	80021be <I2C_ITSlaveCplt+0x56>
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80021bc:	d108      	bne.n	80021d0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80021be:	f248 0102 	movw	r1, #32770	@ 0x8002
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fba0 	bl	8002908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2222      	movs	r2, #34	@ 0x22
 80021cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ce:	e00a      	b.n	80021e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80021d0:	7afb      	ldrb	r3, [r7, #11]
 80021d2:	2b28      	cmp	r3, #40	@ 0x28
 80021d4:	d107      	bne.n	80021e6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80021d6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fb94 	bl	8002908 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b8c      	ldr	r3, [pc, #560]	@ (8002434 <I2C_ITSlaveCplt+0x2cc>)
 8002202:	400b      	ands	r3, r1
 8002204:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa85 	bl	8002716 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	0b9b      	lsrs	r3, r3, #14
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002226:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	b29a      	uxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800223e:	e018      	b.n	8002272 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	0bdb      	lsrs	r3, r3, #15
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800225a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d006      	beq.n	8002272 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d020      	beq.n	80022c0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d04a      	beq.n	8002378 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d044      	beq.n	8002378 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d128      	bne.n	800234a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b28      	cmp	r3, #40	@ 0x28
 8002302:	d108      	bne.n	8002316 <I2C_ITSlaveCplt+0x1ae>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800230a:	d104      	bne.n	8002316 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800230c:	6979      	ldr	r1, [r7, #20]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f894 	bl	800243c <I2C_ITListenCplt>
 8002314:	e030      	b.n	8002378 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b29      	cmp	r3, #41	@ 0x29
 8002320:	d10e      	bne.n	8002340 <I2C_ITSlaveCplt+0x1d8>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002328:	d00a      	beq.n	8002340 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2210      	movs	r2, #16
 8002330:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f9ef 	bl	8002716 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fded 	bl	8001f18 <I2C_ITSlaveSeqCplt>
 800233e:	e01b      	b.n	8002378 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2210      	movs	r2, #16
 8002346:	61da      	str	r2, [r3, #28]
 8002348:	e016      	b.n	8002378 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2210      	movs	r2, #16
 8002350:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	f043 0204 	orr.w	r2, r3, #4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <I2C_ITSlaveCplt+0x204>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800236a:	d105      	bne.n	8002378 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8b8 	bl	80024e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8a7 	bl	80024e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b28      	cmp	r3, #40	@ 0x28
 80023a4:	d141      	bne.n	800242a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f847 	bl	800243c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023ae:	e03c      	b.n	800242a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023b8:	d014      	beq.n	80023e4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fdac 	bl	8001f18 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002438 <I2C_ITSlaveCplt+0x2d0>)
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe ff6b 	bl	80012b8 <HAL_I2C_ListenCpltCallback>
}
 80023e2:	e022      	b.n	800242a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b22      	cmp	r3, #34	@ 0x22
 80023ee:	d10e      	bne.n	800240e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe f864 	bl	80004d4 <HAL_I2C_SlaveRxCpltCallback>
}
 800240c:	e00d      	b.n	800242a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe ff2f 	bl	8001288 <HAL_I2C_SlaveTxCpltCallback>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	fe00e800 	.word	0xfe00e800
 8002438:	ffff0000 	.word	0xffff0000

0800243c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a26      	ldr	r2, [pc, #152]	@ (80024e4 <I2C_ITListenCplt+0xa8>)
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d022      	beq.n	80024ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d012      	beq.n	80024ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f043 0204 	orr.w	r2, r3, #4
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80024ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa22 	bl	8002908 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2210      	movs	r2, #16
 80024ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7fe feef 	bl	80012b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	ffff0000 	.word	0xffff0000

080024e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a6d      	ldr	r2, [pc, #436]	@ (80026bc <I2C_ITError+0x1d4>)
 8002506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b28      	cmp	r3, #40	@ 0x28
 800251e:	d005      	beq.n	800252c <I2C_ITError+0x44>
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b29      	cmp	r3, #41	@ 0x29
 8002524:	d002      	beq.n	800252c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b2a      	cmp	r3, #42	@ 0x2a
 800252a:	d10b      	bne.n	8002544 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800252c:	2103      	movs	r1, #3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9ea 	bl	8002908 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2228      	movs	r2, #40	@ 0x28
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a60      	ldr	r2, [pc, #384]	@ (80026c0 <I2C_ITError+0x1d8>)
 8002540:	635a      	str	r2, [r3, #52]	@ 0x34
 8002542:	e030      	b.n	80025a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002544:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f9dd 	bl	8002908 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f8e1 	bl	8002716 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b60      	cmp	r3, #96	@ 0x60
 800255e:	d01f      	beq.n	80025a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b20      	cmp	r3, #32
 8002574:	d114      	bne.n	80025a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b10      	cmp	r3, #16
 8002582:	d109      	bne.n	8002598 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2210      	movs	r2, #16
 800258a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2220      	movs	r2, #32
 800259e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d039      	beq.n	8002628 <I2C_ITError+0x140>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b11      	cmp	r3, #17
 80025b8:	d002      	beq.n	80025c0 <I2C_ITError+0xd8>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b21      	cmp	r3, #33	@ 0x21
 80025be:	d133      	bne.n	8002628 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025ce:	d107      	bne.n	80025e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe faff 	bl	8000be8 <HAL_DMA_GetState>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d017      	beq.n	8002620 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	4a33      	ldr	r2, [pc, #204]	@ (80026c4 <I2C_ITError+0x1dc>)
 80025f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fa88 	bl	8000b1a <HAL_DMA_Abort_IT>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d04d      	beq.n	80026ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800261a:	4610      	mov	r0, r2
 800261c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800261e:	e045      	b.n	80026ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f851 	bl	80026c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002626:	e041      	b.n	80026ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d039      	beq.n	80026a4 <I2C_ITError+0x1bc>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b12      	cmp	r3, #18
 8002634:	d002      	beq.n	800263c <I2C_ITError+0x154>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b22      	cmp	r3, #34	@ 0x22
 800263a:	d133      	bne.n	80026a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800264a:	d107      	bne.n	800265c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800265a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fac1 	bl	8000be8 <HAL_DMA_GetState>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d017      	beq.n	800269c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <I2C_ITError+0x1dc>)
 8002672:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fa4a 	bl	8000b1a <HAL_DMA_Abort_IT>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d011      	beq.n	80026b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002696:	4610      	mov	r0, r2
 8002698:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800269a:	e009      	b.n	80026b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f813 	bl	80026c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026a2:	e005      	b.n	80026b0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f80f 	bl	80026c8 <I2C_TreatErrorCallback>
  }
}
 80026aa:	e002      	b.n	80026b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026ac:	bf00      	nop
 80026ae:	e000      	b.n	80026b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026b0:	bf00      	nop
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	ffff0000 	.word	0xffff0000
 80026c0:	08001585 	.word	0x08001585
 80026c4:	0800275f 	.word	0x0800275f

080026c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b60      	cmp	r3, #96	@ 0x60
 80026da:	d10e      	bne.n	80026fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fe08 	bl	8001308 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80026f8:	e009      	b.n	800270e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fe fdf3 	bl	80012f4 <HAL_I2C_ErrorCallback>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d103      	bne.n	8002734 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d007      	beq.n	8002752 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	619a      	str	r2, [r3, #24]
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	2200      	movs	r2, #0
 800277a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002788:	2200      	movs	r2, #0
 800278a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ff9b 	bl	80026c8 <I2C_TreatErrorCallback>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	4613      	mov	r3, r2
 80027ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b4:	7a7b      	ldrb	r3, [r7, #9]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027da:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <I2C_TransferConfig+0x60>)
 80027dc:	430b      	orrs	r3, r1
 80027de:	43db      	mvns	r3, r3
 80027e0:	ea02 0103 	and.w	r1, r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	03ff63ff 	.word	0x03ff63ff

08002800 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002814:	4a39      	ldr	r2, [pc, #228]	@ (80028fc <I2C_Enable_IRQ+0xfc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d032      	beq.n	8002880 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800281e:	4a38      	ldr	r2, [pc, #224]	@ (8002900 <I2C_Enable_IRQ+0x100>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d02d      	beq.n	8002880 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002828:	4a36      	ldr	r2, [pc, #216]	@ (8002904 <I2C_Enable_IRQ+0x104>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d028      	beq.n	8002880 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800282e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da03      	bge.n	800283e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800283c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800284e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8002860:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	2b10      	cmp	r3, #16
 8002866:	d103      	bne.n	8002870 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800286e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	2b20      	cmp	r3, #32
 8002874:	d133      	bne.n	80028de <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f043 0320 	orr.w	r3, r3, #32
 800287c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800287e:	e02e      	b.n	80028de <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002884:	2b00      	cmp	r3, #0
 8002886:	da03      	bge.n	8002890 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800288e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80028a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80028b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d103      	bne.n	80028c2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d103      	bne.n	80028d0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	d103      	bne.n	80028de <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	0800178d 	.word	0x0800178d
 8002900:	08001bd5 	.word	0x08001bd5
 8002904:	08001975 	.word	0x08001975

08002908 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00f      	beq.n	8002942 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002928:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002936:	2b28      	cmp	r3, #40	@ 0x28
 8002938:	d003      	beq.n	8002942 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002940:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00f      	beq.n	800296c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002952:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002960:	2b28      	cmp	r3, #40	@ 0x28
 8002962:	d003      	beq.n	800296c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800296a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800296c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002970:	2b00      	cmp	r3, #0
 8002972:	da03      	bge.n	800297c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800297a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	2b10      	cmp	r3, #16
 8002980:	d103      	bne.n	800298a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002988:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	2b20      	cmp	r3, #32
 800298e:	d103      	bne.n	8002998 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f043 0320 	orr.w	r3, r3, #32
 8002996:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	2b40      	cmp	r3, #64	@ 0x40
 800299c:	d103      	bne.n	80029a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43da      	mvns	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d138      	bne.n	8002a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e032      	b.n	8002a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d139      	bne.n	8002ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e033      	b.n	8002ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2224      	movs	r2, #36	@ 0x24
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002aac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d141      	bne.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b02:	4b4b      	ldr	r3, [pc, #300]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d131      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b10:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b16:	4a46      	ldr	r2, [pc, #280]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b20:	4b43      	ldr	r3, [pc, #268]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b28:	4a41      	ldr	r2, [pc, #260]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b30:	4b40      	ldr	r3, [pc, #256]	@ (8002c34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2232      	movs	r2, #50	@ 0x32
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	0c9b      	lsrs	r3, r3, #18
 8002b42:	3301      	adds	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b46:	e002      	b.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b4e:	4b38      	ldr	r3, [pc, #224]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5a:	d102      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f2      	bne.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b62:	4b33      	ldr	r3, [pc, #204]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6e:	d158      	bne.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e057      	b.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b74:	4b2e      	ldr	r3, [pc, #184]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b84:	e04d      	b.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8c:	d141      	bne.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b8e:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9a:	d131      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba2:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bac:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2232      	movs	r2, #50	@ 0x32
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	0c9b      	lsrs	r3, r3, #18
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd2:	e002      	b.n	8002bda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be6:	d102      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f2      	bne.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfa:	d112      	bne.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e011      	b.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c10:	e007      	b.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c1a:	4a05      	ldr	r2, [pc, #20]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	40007000 	.word	0x40007000
 8002c34:	20000010 	.word	0x20000010
 8002c38:	431bde83 	.word	0x431bde83

08002c3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a04      	ldr	r2, [pc, #16]	@ (8002c58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c4a:	6093      	str	r3, [r2, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40007000 	.word	0x40007000

08002c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e2fe      	b.n	800326c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d075      	beq.n	8002d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7a:	4b97      	ldr	r3, [pc, #604]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c84:	4b94      	ldr	r3, [pc, #592]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3e>
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x44>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05b      	beq.n	8002d64 <HAL_RCC_OscConfig+0x108>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d157      	bne.n	8002d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e2d9      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x74>
 8002cc2:	4b85      	ldr	r3, [pc, #532]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a84      	ldr	r2, [pc, #528]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e01d      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x98>
 8002cda:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7b      	ldr	r2, [pc, #492]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cf4:	4b78      	ldr	r3, [pc, #480]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a77      	ldr	r2, [pc, #476]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b75      	ldr	r3, [pc, #468]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a74      	ldr	r2, [pc, #464]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fd fde6 	bl	80008e4 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fd fde2 	bl	80008e4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	@ 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e29e      	b.n	800326c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0xc0>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fd fdd2 	bl	80008e4 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fd fdce 	bl	80008e4 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e28a      	b.n	800326c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d56:	4b60      	ldr	r3, [pc, #384]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0xe8>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d075      	beq.n	8002e5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b59      	ldr	r3, [pc, #356]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7c:	4b56      	ldr	r3, [pc, #344]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_OscConfig+0x136>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_OscConfig+0x13c>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d11f      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d98:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_OscConfig+0x154>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e25d      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b49      	ldr	r3, [pc, #292]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	4946      	ldr	r1, [pc, #280]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dc4:	4b45      	ldr	r3, [pc, #276]	@ (8002edc <HAL_RCC_OscConfig+0x280>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fd3f 	bl	800084c <HAL_InitTick>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d043      	beq.n	8002e5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e249      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fd fd7a 	bl	80008e4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df4:	f7fd fd76 	bl	80008e4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e232      	b.n	800326c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e06:	4b34      	ldr	r3, [pc, #208]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b31      	ldr	r3, [pc, #196]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	492d      	ldr	r1, [pc, #180]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
 8002e26:	e01a      	b.n	8002e5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fd fd56 	bl	80008e4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7fd fd52 	bl	80008e4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e20e      	b.n	800326c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x1e0>
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d041      	beq.n	8002eee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01c      	beq.n	8002eac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e78:	4a17      	ldr	r2, [pc, #92]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fd fd2f 	bl	80008e4 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fd fd2b 	bl	80008e4 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e1e7      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ef      	beq.n	8002e8a <HAL_RCC_OscConfig+0x22e>
 8002eaa:	e020      	b.n	8002eee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb2:	4a09      	ldr	r2, [pc, #36]	@ (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fd fd12 	bl	80008e4 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec2:	e00d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fd fd0e 	bl	80008e4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d906      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1ca      	b.n	800326c <HAL_RCC_OscConfig+0x610>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ea      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a6 	beq.w	8003048 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f00:	4b84      	ldr	r3, [pc, #528]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_OscConfig+0x2b4>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_RCC_OscConfig+0x2b6>
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b7f      	ldr	r3, [pc, #508]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f22:	4b7c      	ldr	r3, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f32:	4b79      	ldr	r3, [pc, #484]	@ (8003118 <HAL_RCC_OscConfig+0x4bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f3e:	4b76      	ldr	r3, [pc, #472]	@ (8003118 <HAL_RCC_OscConfig+0x4bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a75      	ldr	r2, [pc, #468]	@ (8003118 <HAL_RCC_OscConfig+0x4bc>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fccb 	bl	80008e4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fd fcc7 	bl	80008e4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e183      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f64:	4b6c      	ldr	r3, [pc, #432]	@ (8003118 <HAL_RCC_OscConfig+0x4bc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d108      	bne.n	8002f8a <HAL_RCC_OscConfig+0x32e>
 8002f78:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7e:	4a65      	ldr	r2, [pc, #404]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f88:	e024      	b.n	8002fd4 <HAL_RCC_OscConfig+0x378>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d110      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x358>
 8002f92:	4b60      	ldr	r3, [pc, #384]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f98:	4a5e      	ldr	r2, [pc, #376]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa8:	4a5a      	ldr	r2, [pc, #360]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb2:	e00f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x378>
 8002fb4:	4b57      	ldr	r3, [pc, #348]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	4a56      	ldr	r2, [pc, #344]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fc4:	4b53      	ldr	r3, [pc, #332]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fca:	4a52      	ldr	r2, [pc, #328]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fd fc82 	bl	80008e4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fd fc7e 	bl	80008e4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e138      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ed      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x388>
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fd fc6b 	bl	80008e4 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fd fc67 	bl	80008e4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e121      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003028:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ed      	bne.n	8003012 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b35      	ldr	r3, [pc, #212]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	4a34      	ldr	r2, [pc, #208]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003046:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d03c      	beq.n	80030ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01c      	beq.n	8003096 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800305c:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 800305e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003062:	4a2c      	ldr	r2, [pc, #176]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fd fc3a 	bl	80008e4 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003074:	f7fd fc36 	bl	80008e4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0f2      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003086:	4b23      	ldr	r3, [pc, #140]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8003088:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ef      	beq.n	8003074 <HAL_RCC_OscConfig+0x418>
 8003094:	e01b      	b.n	80030ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003096:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800309c:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fd fc1d 	bl	80008e4 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ae:	f7fd fc19 	bl	80008e4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e0d5      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030c0:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ef      	bne.n	80030ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80c9 	beq.w	800326a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	f000 8083 	beq.w	80031ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d15e      	bne.n	80031ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a08      	ldr	r2, [pc, #32]	@ (8003114 <HAL_RCC_OscConfig+0x4b8>)
 80030f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fd fbf3 	bl	80008e4 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003100:	e00c      	b.n	800311c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003102:	f7fd fbef 	bl	80008e4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d905      	bls.n	800311c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0ab      	b.n	800326c <HAL_RCC_OscConfig+0x610>
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311c:	4b55      	ldr	r3, [pc, #340]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ec      	bne.n	8003102 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003128:	4b52      	ldr	r3, [pc, #328]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	4b52      	ldr	r3, [pc, #328]	@ (8003278 <HAL_RCC_OscConfig+0x61c>)
 800312e:	4013      	ands	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6a11      	ldr	r1, [r2, #32]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003138:	3a01      	subs	r2, #1
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003142:	0212      	lsls	r2, r2, #8
 8003144:	4311      	orrs	r1, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800314a:	0852      	lsrs	r2, r2, #1
 800314c:	3a01      	subs	r2, #1
 800314e:	0552      	lsls	r2, r2, #21
 8003150:	4311      	orrs	r1, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003156:	0852      	lsrs	r2, r2, #1
 8003158:	3a01      	subs	r2, #1
 800315a:	0652      	lsls	r2, r2, #25
 800315c:	4311      	orrs	r1, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003162:	06d2      	lsls	r2, r2, #27
 8003164:	430a      	orrs	r2, r1
 8003166:	4943      	ldr	r1, [pc, #268]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 8003168:	4313      	orrs	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800316c:	4b41      	ldr	r3, [pc, #260]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a40      	ldr	r2, [pc, #256]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003178:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a3d      	ldr	r2, [pc, #244]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fd fbae 	bl	80008e4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fd fbaa 	bl	80008e4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e066      	b.n	800326c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	4b35      	ldr	r3, [pc, #212]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x530>
 80031aa:	e05e      	b.n	800326a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ac:	4b31      	ldr	r3, [pc, #196]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 80031b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fd fb94 	bl	80008e4 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fd fb90 	bl	80008e4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e04c      	b.n	800326c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d2:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031de:	4b25      	ldr	r3, [pc, #148]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	4924      	ldr	r1, [pc, #144]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 80031e4:	4b25      	ldr	r3, [pc, #148]	@ (800327c <HAL_RCC_OscConfig+0x620>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	60cb      	str	r3, [r1, #12]
 80031ea:	e03e      	b.n	800326a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e039      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <HAL_RCC_OscConfig+0x618>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	429a      	cmp	r2, r3
 800320a:	d12c      	bne.n	8003266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	3b01      	subs	r3, #1
 8003218:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d123      	bne.n	8003266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d11b      	bne.n	8003266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d113      	bne.n	8003266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d109      	bne.n	8003266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	3b01      	subs	r3, #1
 8003260:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	019f800c 	.word	0x019f800c
 800327c:	feeefffc 	.word	0xfeeefffc

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e11e      	b.n	80034d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b91      	ldr	r3, [pc, #580]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d910      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b8e      	ldr	r3, [pc, #568]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 020f 	bic.w	r2, r3, #15
 80032ae:	498c      	ldr	r1, [pc, #560]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b8a      	ldr	r3, [pc, #552]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e106      	b.n	80034d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d073      	beq.n	80033bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d129      	bne.n	8003330 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032dc:	4b81      	ldr	r3, [pc, #516]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0f4      	b.n	80034d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032ec:	f000 f966 	bl	80035bc <RCC_GetSysClockFreqFromPLLSource>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4a7c      	ldr	r2, [pc, #496]	@ (80034e8 <HAL_RCC_ClockConfig+0x268>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d93f      	bls.n	800337a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032fa:	4b7a      	ldr	r3, [pc, #488]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800330e:	2b00      	cmp	r3, #0
 8003310:	d033      	beq.n	800337a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003316:	2b00      	cmp	r3, #0
 8003318:	d12f      	bne.n	800337a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800331a:	4b72      	ldr	r3, [pc, #456]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003322:	4a70      	ldr	r2, [pc, #448]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 8003324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003328:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e024      	b.n	800337a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d107      	bne.n	8003348 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003338:	4b6a      	ldr	r3, [pc, #424]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0c6      	b.n	80034d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003348:	4b66      	ldr	r3, [pc, #408]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0be      	b.n	80034d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003358:	f000 f8ce 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 800335c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4a61      	ldr	r2, [pc, #388]	@ (80034e8 <HAL_RCC_ClockConfig+0x268>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d909      	bls.n	800337a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003366:	4b5f      	ldr	r3, [pc, #380]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800336e:	4a5d      	ldr	r2, [pc, #372]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 8003370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003374:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b5a      	ldr	r3, [pc, #360]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4957      	ldr	r1, [pc, #348]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338c:	f7fd faaa 	bl	80008e4 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fd faa6 	bl	80008e4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e095      	b.n	80034d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b4e      	ldr	r3, [pc, #312]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d4:	4b43      	ldr	r3, [pc, #268]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a42      	ldr	r2, [pc, #264]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80033da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033ec:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033f4:	4a3b      	ldr	r2, [pc, #236]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80033f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4936      	ldr	r1, [pc, #216]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
 800340e:	e008      	b.n	8003422 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b80      	cmp	r3, #128	@ 0x80
 8003414:	d105      	bne.n	8003422 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003416:	4b33      	ldr	r3, [pc, #204]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	4a32      	ldr	r2, [pc, #200]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 800341c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003420:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003422:	4b2f      	ldr	r3, [pc, #188]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d21d      	bcs.n	800346c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003430:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 020f 	bic.w	r2, r3, #15
 8003438:	4929      	ldr	r1, [pc, #164]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003440:	f7fd fa50 	bl	80008e4 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fd fa4c 	bl	80008e4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e03b      	b.n	80034d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_RCC_ClockConfig+0x260>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d1ed      	bne.n	8003448 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4917      	ldr	r1, [pc, #92]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490f      	ldr	r1, [pc, #60]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034aa:	f000 f825 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <HAL_RCC_ClockConfig+0x264>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490c      	ldr	r1, [pc, #48]	@ (80034ec <HAL_RCC_ClockConfig+0x26c>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a0a      	ldr	r2, [pc, #40]	@ (80034f0 <HAL_RCC_ClockConfig+0x270>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_RCC_ClockConfig+0x274>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd f9bc 	bl	800084c <HAL_InitTick>
 80034d4:	4603      	mov	r3, r0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	04c4b400 	.word	0x04c4b400
 80034ec:	08003a98 	.word	0x08003a98
 80034f0:	20000010 	.word	0x20000010
 80034f4:	20000014 	.word	0x20000014

080034f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034fe:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d102      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800350a:	4b2a      	ldr	r3, [pc, #168]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	e047      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003510:	4b27      	ldr	r3, [pc, #156]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d102      	bne.n	8003522 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800351c:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	e03e      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003522:	4b23      	ldr	r3, [pc, #140]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d136      	bne.n	800359c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800352e:	4b20      	ldr	r3, [pc, #128]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	3301      	adds	r3, #1
 8003544:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800354c:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	4a16      	ldr	r2, [pc, #88]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003556:	68d2      	ldr	r2, [r2, #12]
 8003558:	0a12      	lsrs	r2, r2, #8
 800355a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
      break;
 8003564:	e00c      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003566:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003570:	68d2      	ldr	r2, [r2, #12]
 8003572:	0a12      	lsrs	r2, r2, #8
 8003574:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
      break;
 800357e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0e5b      	lsrs	r3, r3, #25
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	3301      	adds	r3, #1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	e001      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035a0:	693b      	ldr	r3, [r7, #16]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	00f42400 	.word	0x00f42400
 80035b8:	007a1200 	.word	0x007a1200

080035bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c2:	4b1e      	ldr	r3, [pc, #120]	@ (800363c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d10c      	bne.n	80035fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e0:	4a17      	ldr	r2, [pc, #92]	@ (8003640 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	4a14      	ldr	r2, [pc, #80]	@ (800363c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ea:	68d2      	ldr	r2, [r2, #12]
 80035ec:	0a12      	lsrs	r2, r2, #8
 80035ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	617b      	str	r3, [r7, #20]
    break;
 80035f8:	e00c      	b.n	8003614 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035fa:	4a12      	ldr	r2, [pc, #72]	@ (8003644 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	4a0e      	ldr	r2, [pc, #56]	@ (800363c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	0a12      	lsrs	r2, r2, #8
 8003608:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    break;
 8003612:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	0e5b      	lsrs	r3, r3, #25
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	3301      	adds	r3, #1
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800362e:	687b      	ldr	r3, [r7, #4]
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40021000 	.word	0x40021000
 8003640:	007a1200 	.word	0x007a1200
 8003644:	00f42400 	.word	0x00f42400

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003650:	2300      	movs	r3, #0
 8003652:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003654:	2300      	movs	r3, #0
 8003656:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8098 	beq.w	8003796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b43      	ldr	r3, [pc, #268]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b40      	ldr	r3, [pc, #256]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	4a3f      	ldr	r2, [pc, #252]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003680:	6593      	str	r3, [r2, #88]	@ 0x58
 8003682:	4b3d      	ldr	r3, [pc, #244]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003692:	4b3a      	ldr	r3, [pc, #232]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a39      	ldr	r2, [pc, #228]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800369c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800369e:	f7fd f921 	bl	80008e4 <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036a4:	e009      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fd f91d 	bl	80008e4 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d902      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	74fb      	strb	r3, [r7, #19]
        break;
 80036b8:	e005      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ba:	4b30      	ldr	r3, [pc, #192]	@ (800377c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ef      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d159      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01e      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d019      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036e8:	4b23      	ldr	r3, [pc, #140]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036f4:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003704:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	4a1b      	ldr	r2, [pc, #108]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003714:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7fd f8dd 	bl	80008e4 <HAL_GetTick>
 800372a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800372c:	e00b      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fd f8d9 	bl	80008e4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d902      	bls.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	74fb      	strb	r3, [r7, #19]
            break;
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003746:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ec      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003760:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	4903      	ldr	r1, [pc, #12]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003770:	e008      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	74bb      	strb	r3, [r7, #18]
 8003776:	e005      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003778:	40021000 	.word	0x40021000
 800377c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003784:	7c7b      	ldrb	r3, [r7, #17]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378a:	4ba6      	ldr	r3, [pc, #664]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378e:	4aa5      	ldr	r2, [pc, #660]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003794:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a2:	4ba0      	ldr	r3, [pc, #640]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a8:	f023 0203 	bic.w	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	499c      	ldr	r1, [pc, #624]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c4:	4b97      	ldr	r3, [pc, #604]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f023 020c 	bic.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4994      	ldr	r1, [pc, #592]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	498b      	ldr	r1, [pc, #556]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003808:	4b86      	ldr	r3, [pc, #536]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	4983      	ldr	r1, [pc, #524]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003830:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	497a      	ldr	r1, [pc, #488]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800384c:	4b75      	ldr	r3, [pc, #468]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003852:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4972      	ldr	r1, [pc, #456]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800386e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	4969      	ldr	r1, [pc, #420]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003890:	4b64      	ldr	r3, [pc, #400]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4961      	ldr	r1, [pc, #388]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	4958      	ldr	r1, [pc, #352]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d4:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	4950      	ldr	r1, [pc, #320]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038f2:	d105      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003908:	2b00      	cmp	r3, #0
 800390a:	d015      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800390c:	4b45      	ldr	r3, [pc, #276]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	4942      	ldr	r1, [pc, #264]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392a:	d105      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a3c      	ldr	r2, [pc, #240]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003936:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d015      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003944:	4b37      	ldr	r3, [pc, #220]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	4934      	ldr	r1, [pc, #208]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003962:	d105      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003964:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a2e      	ldr	r2, [pc, #184]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800396e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d015      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800397c:	4b29      	ldr	r3, [pc, #164]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398a:	4926      	ldr	r1, [pc, #152]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800399a:	d105      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399c:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a20      	ldr	r2, [pc, #128]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d015      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	4918      	ldr	r1, [pc, #96]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d2:	d105      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a12      	ldr	r2, [pc, #72]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fa:	490a      	ldr	r1, [pc, #40]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a04      	ldr	r2, [pc, #16]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a18:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000

08003a28 <memset>:
 8003a28:	4402      	add	r2, r0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d100      	bne.n	8003a32 <memset+0xa>
 8003a30:	4770      	bx	lr
 8003a32:	f803 1b01 	strb.w	r1, [r3], #1
 8003a36:	e7f9      	b.n	8003a2c <memset+0x4>

08003a38 <__libc_init_array>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a70 <__libc_init_array+0x38>)
 8003a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8003a74 <__libc_init_array+0x3c>)
 8003a3e:	1b64      	subs	r4, r4, r5
 8003a40:	10a4      	asrs	r4, r4, #2
 8003a42:	2600      	movs	r6, #0
 8003a44:	42a6      	cmp	r6, r4
 8003a46:	d109      	bne.n	8003a5c <__libc_init_array+0x24>
 8003a48:	4d0b      	ldr	r5, [pc, #44]	@ (8003a78 <__libc_init_array+0x40>)
 8003a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8003a7c <__libc_init_array+0x44>)
 8003a4c:	f000 f818 	bl	8003a80 <_init>
 8003a50:	1b64      	subs	r4, r4, r5
 8003a52:	10a4      	asrs	r4, r4, #2
 8003a54:	2600      	movs	r6, #0
 8003a56:	42a6      	cmp	r6, r4
 8003a58:	d105      	bne.n	8003a66 <__libc_init_array+0x2e>
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
 8003a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a60:	4798      	blx	r3
 8003a62:	3601      	adds	r6, #1
 8003a64:	e7ee      	b.n	8003a44 <__libc_init_array+0xc>
 8003a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a6a:	4798      	blx	r3
 8003a6c:	3601      	adds	r6, #1
 8003a6e:	e7f2      	b.n	8003a56 <__libc_init_array+0x1e>
 8003a70:	08003ab0 	.word	0x08003ab0
 8003a74:	08003ab0 	.word	0x08003ab0
 8003a78:	08003ab0 	.word	0x08003ab0
 8003a7c:	08003ab4 	.word	0x08003ab4

08003a80 <_init>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	bf00      	nop
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr

08003a8c <_fini>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr
